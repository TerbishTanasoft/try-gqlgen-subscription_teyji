package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"
	"time"
	"try-gqlgen-subscription_teyji/graph/model"
)

// SendNotification is the resolver for the sendNotification field.
func (r *mutationResolver) SendNotification(ctx context.Context, message string) (bool, error) {
	notification := &model.Notification{
		Message:   message,
		Timestamp: time.Now().Format(time.RFC3339),
	}

	for _, ch := range notificationSubscribers {
		ch <- notification
	}

	return true, nil
}

// Placeholder is the resolver for the placeholder field.
func (r *queryResolver) Placeholder(ctx context.Context) (*string, error) {
	panic(fmt.Errorf("not implemented: Placeholder - placeholder"))
}

// CurrentTime is the resolver for the currentTime field.
func (r *subscriptionResolver) CurrentTime(ctx context.Context) (<-chan *model.Time, error) {
	ch := make(chan *model.Time)
	go func() {
		defer close(ch)
		for {
			time.Sleep(1 * time.Second)
			currentTime := time.Now()
			t := &model.Time{
				UnixTime:  int(currentTime.Unix()),
				TimeStamp: currentTime.Format(time.RFC3339),
			}
			select {
			case <-ctx.Done():
				fmt.Println("Subscription Closed")
				return
			case ch <- t:
			}
		}
	}()
	return ch, nil
}

// Notifications is the resolver for the notifications field.
func (r *subscriptionResolver) Notifications(ctx context.Context) (<-chan *model.Notification, error) {
	id := fmt.Sprintf("%v", time.Now().UnixNano())
	ch := make(chan *model.Notification)
	notificationSubscribers[id] = ch

	go func() {
		<-ctx.Done()
		delete(notificationSubscribers, id)
		close(ch)
	}()

	return ch, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
var notificationSubscribers = map[string]chan *model.Notification{}
